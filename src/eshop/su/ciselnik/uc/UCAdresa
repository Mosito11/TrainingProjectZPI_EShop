package eshop.su.ciselnik.uc;

import org.eclipse.persistence.zpi.sessions.UnitOfWork;

import eshop.bo.ciselniky.Adresa;
import eshop.bo.ciselniky.TovarDruh;
import netball.server.pack.EnabledPack;
import netball.server.pack.Item;
import netball.server.pack.RequiredPack;
import netball.server.pack.ValuePack;
import netframework.bo.PersistentObject;
import netframework.eclipselink.EclipseLinkSession;
import netframework.eclipselink.UCPersistentObject;
import netframework.eclipselink.UCPersistentObject.DeleteController;


public class UCAdresa extends UCPersistentObject {
    
    public static final String ULICA = Adresa.ULICA.getId();
    public static final String CISLO = Adresa.CISLO.getId();
    public static final String MESTO = Adresa.MESTO.getId();
    public static final String PSC = Adresa.PSC.getId();
    
    private UCAdresa(Adresa object, EclipseLinkSession session) {
        super(object, session); 
    }

    @Override
    protected void setValuePack(ValuePack pack) throws Exception { 
        if (pack == null)
           return;
        
        Adresa adresa = (Adresa) getObject();   
        EnabledPack enabledPack = getEnabledPack(); 
        for (int i = 0; i < pack.size(); i++) {
           Item item = pack.get(i);                
           Object id = item.getId();
           Object value = item.getValue();                
           if (enabledPack != null && !enabledPack.isEnabled(id))
              continue;
           if (id.equals(ULICA)) {
              adresa.setUlica((String) value);
           }else if (id.equals(CISLO)) {
              adresa.setCislo((String) value); 
           }else if (id.equals(MESTO)) {
        	  adresa.setMesto((String) value); 
           }else if (id.equals(PSC)) {
        	  adresa.setPsc((String) value);
           }   
        }   
    }
    
    @Override
    public ValuePack getValuePack() {
        Adresa adresa = (Adresa) getObject();
        ValuePack pack = new ValuePack();
        pack.put(ULICA, adresa.getUlica());
        pack.put(CISLO, adresa.getCislo());
        pack.put(MESTO, adresa.getMesto());
        pack.put(PSC, adresa.getPsc());
        return pack;
    }
    
    @Override
    public RequiredPack getRequiredPack() {
        RequiredPack pack = new RequiredPack();
        pack.put(ULICA, Adresa.ULICA.isRequired());
        pack.put(CISLO, Adresa.CISLO.isRequired());
        pack.put(MESTO, Adresa.MESTO.isRequired());
        pack.put(PSC, Adresa.PSC.isRequired());
        return pack;
    } 
    
    @Override
    public EnabledPack getEnabledPack() {
        return null;
    }

	@Override
	public void validate() throws Exception {
		((Adresa) getObject()).validate(getSessionObject());
	}        
    
    // vytvori novy
    public static UCAdresa create(EclipseLinkSession session) {
        return new UCAdresa(new Adresa(), session);
    }

    // nacita 
    public static UCAdresa read(Object id, EclipseLinkSession session) throws Exception {
        Adresa adresa = (Adresa) read(Adresa.class, id, session);
        return new UCAdresa(adresa, session);
    }   
    
    // vymaze
    public static void delete(Object id, EclipseLinkSession session) throws Exception {
    	DeleteController controller = new DeleteController() {
			@Override
			public void delete(PersistentObject object,	EclipseLinkSession session, UnitOfWork uow)	throws Exception {
				//ked chcem deletovat, musim si vytvorit metodu delete v BO?
				((Adresa) object).delete(session);
			}
    	};  
        delete(Adresa.class, id, controller, session);
    }
    
}          
