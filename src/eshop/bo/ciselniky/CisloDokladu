package eshop.bo.ciselniky;

import java.util.Calendar;

import org.eclipse.persistence.zpi.expressions.Expression;
import org.eclipse.persistence.zpi.expressions.ExpressionBuilder;
import org.eclipse.persistence.zpi.sessions.UnitOfWork;

import netframework.bo.PersistentObject;
import netframework.bo.attributes.NumberAttribute;
import netframework.bo.attributes.TextAttribute;

public class CisloDokladu extends PersistentObject {
	
	public static final NumberAttribute ID = new NumberAttribute("CisloDokladu.id", "id");
	public static final TextAttribute ROK = new TextAttribute("CisloDokladu.rok", "rok");
	public static final TextAttribute TYP = new TextAttribute("CisloDokladu.typ", "typ");
    public static final TextAttribute PORADOVE_CISLO = new TextAttribute("CisloDokladu.poradoveCislo", "poradoveCislo");
    
    static{
    	ROK.setCaption("Rok");
		/*ROK.setLongCaption("Rok");
		ROK.setColumnName(ROK.getCaption());
		ROK.setLongColumnName(ROK.getLongCaption());
		*/
		ROK.setLimit(4);
		ROK.setRequired(true);
		ROK.setFixedLimit(true);
		
		TYP.setCaption("Typ dokladu");
		/*TYP.setLongCaption("Typ dokladu");
		TYP.setColumnName(TYP.getCaption());
		TYP.setLongColumnName(TYP.getLongCaption());*/
		TYP.setLimit(1);
		TYP.setRequired(true);
		TYP.setFixedLimit(true);
		
		PORADOVE_CISLO.setCaption("Poradove cislo");
		//PORADOVE_CISLO.setLongCaption("Poradove cislo");
		PORADOVE_CISLO.setRequired(true);
		PORADOVE_CISLO.setLimit(4);
		PORADOVE_CISLO.setFixedLimit(true);
    }
    
    private String rok;
	private String typ;
	private String poradoveCislo;
	
	public String getRok() {
		return rok;
	}

	public void setRok(String rok) {
		this.rok = rok;
	}

	public String getTyp() {
		return typ;
	}

	public void setTyp(String typ) {
		this.typ = typ;
	}

	public String getPoradoveCislo() {
		return poradoveCislo;
	}

	public void setPoradoveCislo(String poradoveCislo) {
		if (poradoveCislo != null)
			poradoveCislo = poradoveCislo.trim();
		this.poradoveCislo = poradoveCislo;
	}
	
	//synchronized znamena, manazovanie threads, tj. napr. ked sa viac zakaznikov pripaja naraz aby system negeneroval rovnake cislo, ale cakal, kym sa jednotlive vlakna neukoncia
	//nahradit mozem commitnutim unitOfWorku priamo v metode
	public synchronized static void setCislo(Objednavka objednavka, UnitOfWork unitOfWork) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(objednavka.getDatum());
		int rok = calendar.get(Calendar.YEAR);
		ExpressionBuilder builder = new ExpressionBuilder();
		Expression exp = builder.get(CisloDokladu.TYP.getName()).equal(TypDokladu.OBJEDNAVKA.getKey());
		exp = exp.and(builder.get(CisloDokladu.ROK.getName()).equal(rok));
		CisloDokladu cisloDokladu = (CisloDokladu) unitOfWork.readObject(CisloDokladu.class, exp);
		if (cisloDokladu == null) {
			cisloDokladu = new CisloDokladu();
			cisloDokladu.setTyp(TypDokladu.OBJEDNAVKA.getKey());
			cisloDokladu.setPoradoveCislo("0");
			cisloDokladu.setRok(Integer.toString(rok));
			unitOfWork.registerNewObject(cisloDokladu);
		}
		int poradoveCislo = Integer.parseInt(cisloDokladu.getPoradoveCislo());
		poradoveCislo++;
		
		cisloDokladu.setPoradoveCislo(Integer.toString(poradoveCislo));
		
		StringBuilder poradoveCisloFinal = new StringBuilder();
		String poradoveCisloString = Integer.toString(poradoveCislo);
		
		//miesto tvrdeho urcenia cisla radsej pouzivat premennu! v nasom pripade mam nastaveny limit na pocet znakov poradoveho cisla
		for (int i=0; i<(PORADOVE_CISLO.getLimit() - poradoveCisloString.length()); i++) {
			poradoveCisloFinal.append("0");
		}
		poradoveCisloFinal.append(poradoveCisloString);
		
		cisloDokladu.setPoradoveCislo(poradoveCisloFinal.toString());
		
		String cislo = "" + rok + TypDokladu.OBJEDNAVKA.getKey() + poradoveCisloFinal.toString();
		objednavka.setCisloObjednavky(cislo);
		
	}  
	
	public synchronized static void setCislo(Faktura faktura, UnitOfWork unitOfWork) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(faktura.getDatumDodania());
		int rok = calendar.get(Calendar.YEAR);
		ExpressionBuilder builder = new ExpressionBuilder();
		Expression exp = builder.get(CisloDokladu.TYP.getName()).equal(TypDokladu.FAKTURA.getKey());
		exp = exp.and(builder.get(CisloDokladu.ROK.getName()).equal(rok));
		CisloDokladu cisloDokladu = (CisloDokladu) unitOfWork.readObject(CisloDokladu.class, exp);
		if (cisloDokladu == null) {
			cisloDokladu = new CisloDokladu();
			cisloDokladu.setTyp(TypDokladu.FAKTURA.getKey());
			cisloDokladu.setPoradoveCislo("0");
			cisloDokladu.setRok(Integer.toString(rok));
			unitOfWork.registerNewObject(cisloDokladu);
		}
		int poradoveCislo = Integer.parseInt(cisloDokladu.getPoradoveCislo());
		poradoveCislo++;
		
		cisloDokladu.setPoradoveCislo(Integer.toString(poradoveCislo));
		
		StringBuilder poradoveCisloFinal = new StringBuilder();
		String poradoveCisloString = Integer.toString(poradoveCislo);
		
		for (int i=0; i<(PORADOVE_CISLO.getLimit() - poradoveCisloString.length()); i++) {
			poradoveCisloFinal.append("0");
		}
		poradoveCisloFinal.append(poradoveCisloString);
		
		cisloDokladu.setPoradoveCislo(poradoveCisloFinal.toString());
		
		String cislo = "" + rok + TypDokladu.FAKTURA.getKey() + poradoveCisloFinal.toString();
		faktura.setCisloFaktury(cislo);
		
	}

}
