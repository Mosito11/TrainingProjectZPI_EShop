package eshop.bo.ciselniky;

import java.util.Vector;

import org.eclipse.persistence.zpi.expressions.Expression;
import org.eclipse.persistence.zpi.expressions.ExpressionBuilder;
import org.eclipse.persistence.zpi.queries.ReportQuery;
import org.eclipse.persistence.zpi.queries.ReportQueryResult;

import netframework.bo.PersistentObject;
import netframework.bo.attributes.NumberAttribute;
import netframework.bo.attributes.TextAttribute;
import netframework.eclipselink.EclipseLinkSession;

public class Adresa extends PersistentObject {
	
	public static final NumberAttribute ID = new NumberAttribute("Adresa.id", "id");
	public static final TextAttribute ULICA = new TextAttribute("Adresa.ulica", "ulica");
    public static final TextAttribute CISLO = new TextAttribute("Adresa.cislo", "cislo");
    public static final TextAttribute MESTO = new TextAttribute("Adresa.mesto", "mesto");
    public static final TextAttribute PSC = new TextAttribute("Adresa.psc", "psc");

    static{
    	ULICA.setCaption("Ulica");
		/*
		KOD.setLongCaption();
		KOD.setColumnName();
		KOD.setLongColumnName();
		*/
		ULICA.setLimit(30);
		ULICA.setRequired(true);
		
		CISLO.setCaption("Cislo");
		/*
		NAZOV.setLongCaption();
		NAZOV.setColumnName(NAZOV.getCaption());
		NAZOV.setLongColumnName(NAZOV.getLongCaption());
		*/
		CISLO.setLimit(10);
		CISLO.setRequired(true);

		MESTO.setCaption("Mesto");
		/*
		NAZOV.setLongCaption();
		NAZOV.setColumnName(NAZOV.getCaption());
		NAZOV.setLongColumnName(NAZOV.getLongCaption());
		*/
		MESTO.setLimit(30);
		MESTO.setRequired(true);
		
		PSC.setCaption("Psc");
		/*
		VELKOST.setLongCaption();
		VELKOST.setColumnName();
		VELKOST.setLongColumnName();
		*/
		PSC.setLimit(5);
		PSC.setFixedLimit(true);
		PSC.setRequired(true);
    }
    
	private String ulica;
	private String cislo;
	private String mesto;
	private String psc;
	
	public String getUlica() {
		return ulica;
	}
	
	public void setUlica(String ulica) {
		if (ulica != null)
			ulica = ulica.trim();
		this.ulica = ulica;
	}
	
	public String getCislo() {
		return cislo;
	}
	
	public void setCislo(String cislo) {
		if (cislo != null)
			cislo = cislo.trim();
		this.cislo = cislo;
	}
	
	public String getMesto() {
		return mesto;
	}
	
	public void setMesto(String mesto) {
		if (mesto != null)
			mesto = mesto.trim();
		this.mesto = mesto;
	}
	
	public String getPsc() {
		return psc;
	}
	
	public void setPsc(String psc) {
		if (psc != null)
			psc = psc.trim();
		this.psc = psc;
	}
	
	public void validate(EclipseLinkSession session) throws Exception {
        ULICA.checkValue(getUlica(), session);
        CISLO.checkValue(getCislo(), session);
        MESTO.checkValue(getMesto(), session);
        PSC.checkValue(getPsc(), session);
    }
	
	public void delete(EclipseLinkSession session) throws Exception {
 		ExpressionBuilder builder = new ExpressionBuilder();
		Expression exp = builder.anyOf(ObchodnyPartner.ADRESY.getName()).equal(this);
		ReportQuery query = new ReportQuery();
		query.setReferenceClass(ObchodnyPartner.class);
		query.addAttribute(ObchodnyPartner.NAZOV.getName());
		query.setSelectionCriteria(exp);
		Vector<ReportQueryResult> result = (Vector<ReportQueryResult>) session.getSession().executeQuery(query);
		if (result.size() == 0)
			return;
		StringBuilder buffer = new StringBuilder(); 
		for (int i = 0; i < result.size(); i++) {
			ReportQueryResult row = result.get(i);
			buffer.append("\n\t");
			buffer.append(row.getByIndex(0));
		}
		throw new IllegalArgumentException("Nie je mozne vymazat adresu, pretoze je priradena k nasledovnym obchodnym partnerom " + buffer);
    }

}
